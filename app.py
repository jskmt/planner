import streamlit as st
import pandas as pd
import numpy as np
import datetime

# Fun√ß√£o para carregar banco SINAPI
@st.cache_data
def carregar_banco_sinapi(caminho_csv):
    return pd.read_csv(caminho_csv, sep=";", encoding="utf-8")

# Fun√ß√£o para identificar quantidade mesmo com nome diferente
def detectar_coluna_quantidade(df):
    for col in df.columns:
        col_normalizado = str(col).strip().lower()
        if 'quant' in col_normalizado:
            return col
    return None

# Fun√ß√£o principal
def main():
    st.title("üìÖ Gerador de Cronograma de Obra com Base no SINAPI")
    
    planilha = st.file_uploader("üì• Envie sua planilha or√ßament√°ria (.xlsx)", type=["xlsx"])
    banco = st.file_uploader("üì• Envie o banco SINAPI (.csv)", type=["csv"])
    
    if planilha and banco:
        try:
            df_planilha = pd.read_excel(planilha, engine="openpyxl", header=4)
            df_sinapi = carregar_banco_sinapi(banco)

            col_quantidade = detectar_coluna_quantidade(df_planilha)
            if not col_quantidade:
                st.error("‚ùå Coluna de quantidade n√£o encontrada na planilha.")
                return

            atividades = []
            for _, row in df_planilha.iterrows():
                codigo = str(row.get("C√≥digo", "")).strip()
                descricao = str(row.get("Descri√ß√£o", "")).strip()
                try:
                    quantidade = float(str(row.get(col_quantidade, 0)).replace(",", "."))
                except:
                    quantidade = 0

                if not codigo or quantidade <= 0:
                    st.warning(f"‚ö†Ô∏è Quantidade zero ou inv√°lida na linha: üì¶ C√≥digo: {codigo}, Descri√ß√£o: {descricao}, Quantidade lida: {quantidade}")
                    continue

                dados_banco = df_sinapi[df_sinapi['codigo'] == codigo]
                if dados_banco.empty:
                    st.warning(f"‚ùì C√≥digo {codigo} n√£o encontrado no banco SINAPI.")
                    continue

                dados_banco = dados_banco.iloc[0]
                produtividade_dia = dados_banco['produtividade_dia']
                profissionais = int(dados_banco['profissionais'])

                if produtividade_dia <= 0 or profissionais <= 0:
                    st.warning(f"üö´ Dados incompletos para o c√≥digo {codigo}.")
                    continue

                dias_necessarios = np.ceil(quantidade / produtividade_dia)
                atividades.append({
                    "C√≥digo": codigo,
                    "Descri√ß√£o": descricao,
                    "Quantidade": quantidade,
                    "Produtividade (un/dia)": produtividade_dia,
                    "Profissionais": profissionais,
                    "Dias necess√°rios": int(dias_necessarios)
                })

            if atividades:
                df_cronograma = pd.DataFrame(atividades)

                st.subheader("üìã Cronograma Gerado")
                st.dataframe(df_cronograma)

                data_inicio = st.date_input("üóìÔ∏è Data de in√≠cio da obra", datetime.date.today())
                df_cronograma["In√≠cio"] = [data_inicio + datetime.timedelta(days=int(sum(df_cronograma["Dias necess√°rios"][:i]))) for i in range(len(df_cronograma))]
                df_cronograma["T√©rmino"] = df_cronograma["In√≠cio"] + pd.to_timedelta(df_cronograma["Dias necess√°rios"], unit="D")

                st.subheader("üìÖ Cronograma com Datas")
                st.dataframe(df_cronograma[["C√≥digo", "Descri√ß√£o", "In√≠cio", "T√©rmino", "Dias necess√°rios", "Profissionais"]])

                # Download
                st.download_button("üì• Baixar Cronograma Excel", df_cronograma.to_csv(index=False).encode("utf-8"), "cronograma.csv", "text/csv")

            else:
                st.error("Nenhuma atividade v√°lida foi processada.")

        except Exception as e:
            st.error(f"Erro ao processar os arquivos: {e}")

if __name__ == "__main__":
    main()
